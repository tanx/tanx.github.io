<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Tankred's Blog</title><description>Tankred's Blog</description><link>http://localhost:2368/</link><generator>Ghost 0.7</generator><lastBuildDate>Sat, 09 Jan 2016 15:33:17 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Whiteout Post Mortem</title><description>&lt;p&gt;&lt;strong&gt;This post is not an official statement from Whiteout Networks, but rather my own personal views on the market for consumer email privacy and some things I've learned about this space in recent years.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sadly, &lt;a href="https://blog.whiteout.io/2015/11/30/end-of-life-for-whiteout-key-service-action-required/"&gt;as announced on the official whiteout.io blog&lt;/a&gt;, we will be shutting down the service.&lt;/p&gt;</description><link>http://localhost:2368/2015/12/01/whiteout-post-mortem/</link><guid isPermaLink="false">f7731059-4ebc-406f-a85d-95b0e1399d5a</guid><dc:creator>Tankred Hase</dc:creator><pubDate>Mon, 30 Nov 2015 17:59:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;strong&gt;This post is not an official statement from Whiteout Networks, but rather my own personal views on the market for consumer email privacy and some things I've learned about this space in recent years.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sadly, &lt;a href="https://blog.whiteout.io/2015/11/30/end-of-life-for-whiteout-key-service-action-required/"&gt;as announced on the official whiteout.io blog&lt;/a&gt;, we will be shutting down the service. Unfortunately after almost three years of work, we were not able to achieve relevant traction in the marketplace in order to justify ongoing operations to our users and our investors.&lt;/p&gt;

&lt;h2 id="themarketforemailprivacy"&gt;The Market for Email Privacy&lt;/h2&gt;

&lt;p&gt;When we started whiteout in the beginning of 2013 we asked ourselves which market we should focus on - the consumer or the business market. Keep in mind this was before the summer of Snowden and the NSA revelations. So the decision was not at all obvious.&lt;/p&gt;

&lt;h3 id="thebusinessmarket"&gt;The Business Market&lt;/h3&gt;

&lt;p&gt;Our basic assessment of the business market was that there are already many established players offering very mature solutions. Most notably Microsoft's Exchange and Outlook which include built in SMIME encryption as well as comprehensive administration/management options for SMBs as well as large enterprises. There are also numerous PGP/SMIME gateway solutions out there e.g. Symantec's PGP Universal Server that allows companies to centrally manage encryption and keys.&lt;/p&gt;

&lt;p&gt;Entering this space as a startup seemed like jumping into a fishtank full of sharks. Like they say „you don’t get fired for buying IBM“. So why would any company buy a service from a startup that might be gone in a few years, if there are already many great solutions out there from established players such as Microsoft. Our conclusion was to stay away from this market segment and try our luck in the consumer market first.&lt;/p&gt;

&lt;h3 id="theconsumermarket"&gt;The Consumer Market&lt;/h3&gt;

&lt;p&gt;Shortly after the Snowden revelations we decided to make a bet on the consumer privacy market. At the time it seemed obvious, that everyone would start encrypting their email now that we knew everything is being stored indefinitely for later analysis by the NSA. &lt;strong&gt;Boy were we wrong.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id="privacyisafeaturenotaproduct"&gt;Privacy is a Feature not a Product&lt;/h2&gt;

&lt;p&gt;Most users aren’t willing to switch their email address or mail client just because of privacy. It simply isn't that much of a priority to most users. Much more important are design, ease-of-use, functionality, reliability and performance. You could argue that this is a sad fact of life, but it’s also very understandable. People are very good at assessing their own personal threat models. Now while having all your data scooped up by the NSA sounds terrifying to us techies, most people see little to no immediate threat in that. There are simply more important things to worry about in everyday life like financial security, the health and well-being of your family, walking the dog, or showing off to your friends by posting a recent selfie on facebook. We are after all human beings with real life concerns and data privacy simply isn't at the top of our list.&lt;/p&gt;

&lt;p&gt;If there is one thing I've learned it is that privacy and security does not drive behaviour. Users will only adopt encryption at a mass scale if the encryption is built into the guts of an existing product that they and most of their friends already use. A good example of this is the recent addition of end-to-end encryption in WhatsApp which has about 800 million monthly active users. Most of those users will probably never know that they have been upgraded to Moxie's Axolotl protocol under the hood. Which is actually great because encryption is not supposed to get in the user's way.&lt;/p&gt;

&lt;h2 id="encryptedmailproviders"&gt;Encrypted Mail Providers&lt;/h2&gt;

&lt;p&gt;After Snowden, several startups for mail encryption started to emerge. Competition is always a good sign in a marketplace, because it increases the overall quality of available choices for consumers and being the only startup in a certain space can be quite hard because you cannot try every approach at once with limited resources. Watching and learning from your competition can help greatly. It's in this spirit that I talk about the following competitors. But I've never actually seen them as competition, since the market for consumer privacy is still so small and immature. I read the following quote on twitter once and it really stuck with me: &lt;em&gt;"the biggest threat to your startup is not your competition, but rather nobody giving a shit"&lt;/em&gt;. So true!&lt;/p&gt;

&lt;p&gt;One thing that's interesting to point out, is that almost all startups and projects in the email encryption space are from German speaking countries. Most notably Werner Koch of GPG, Thomas Oberndörfer of Mailvelope, and the Enigmail developers Patrik and Nico. It seems that given our history in east Germany and the Stasi, we happen to be the most paranoid when it comes to surveillance.&lt;/p&gt;

&lt;h3 id="whiteout"&gt;Whiteout&lt;/h3&gt;

&lt;p&gt;Before analysing the competion, let's take a long hard look in the mirror. Whiteout had about 13.000 users when we shut down the service. Now keep in mind that these are total signups and not monthly active users. We don't know for certain what the numbers for all competitors are, but if not mentioned I estimate it to be roughly in the same ballpark as our user count.&lt;/p&gt;

&lt;h3 id="lavaboom"&gt;Lavaboom&lt;/h3&gt;

&lt;p&gt;A German startup from Berlin. These guys put down a promising start and received considerable media attention. When they announced their bankruptcy and shutdown of the service, I could only too well understand what they were going through at the time.&lt;/p&gt;

&lt;h3 id="tutanota"&gt;Tutanota&lt;/h3&gt;

&lt;p&gt;Another German startup. Still alive and also received considerable media attention in the tech press.&lt;/p&gt;

&lt;h3 id="protonmail"&gt;Protonmail&lt;/h3&gt;

&lt;p&gt;This startup was started by students at MIT and CERN. They like to advertise their Swiss roots more prominently though because Switzerland has similarly strong privacy laws as Germany. Perhaps even stronger due to Switzerland's banking sector and corporate interests that are very much in favor of strong privacy laws.&lt;/p&gt;

&lt;p&gt;These guys received the most media attention of any startup that's on my radar screen. They were covered by TechCrunch several times and even appeared on FOX news (yes, FOX news). Their &lt;a href="http://techcrunch.com/2015/08/18/protonmail-v2/"&gt;last report&lt;/a&gt; was that they had about 500.000 signups and raised an impressive 2 million from investors.&lt;/p&gt;

&lt;h2 id="backofthenapkinbusinessmodelcalculation"&gt;Back of the Napkin Business Model Calculation&lt;/h2&gt;

&lt;p&gt;Now let's look at those numbers. If we take the Protonmail signups and add the user base from the other startups (which I estimate in all to be lower than that of what Protonmail has), we get around 1 million users in the email privacy market. Now keep in mind that number means signups, not active users. So if we estimate about 10% of users being active (which is very optimistic), we get about 100.000 users actually encrypting their emails using at least one of the above mentioned services.&lt;/p&gt;

&lt;p&gt;Next, because we’re for-profit startups, we need to monetize those users. Since we can't fall back to an ad-based model due to the privacy nature of our businesses, we have to rely on paid subscriptions. And here's where the numbers don't add up. Since we only have about 100k active users, we have to try to convert a large number of those users to paying customers. Even if we converted 5% of those users (which again is very optimistic), we would have about 5.000 paying customers. Now given that email is such a commodity and there are already so many good and full featured services out there for free, we can't charge too much to stay competitive. Basically our premium packages will be between 1 and 5 bucks per user per month, depending on the feature set. For argument's sake let's assume that a premium user will generate an average of 2,5 bucks per month. We will then end up with a potential of 12.500 bucks per month of revenue. This is the pie that all startups in this space share.&lt;/p&gt;

&lt;p&gt;Our burn rate at whiteout was about 30K per month so we would have needed considerably more revenue to achieve cash flow break even. The alternative here was obviously to raise more money, but it was very hard to convince series A investors that the consumer market for email privacy was big enough to justify the investment. The economics simply don't make sense for such a niche market. At least from a VC's point of view that invests several millions expecting a multiple of that in return.&lt;/p&gt;

&lt;p&gt;Having said that, this is just an estimated snapshot of the current market. There is no reason that this could not change. But without considerable changes in user behavior, I wouldn't bet the barn on it.&lt;/p&gt;

&lt;h2 id="openvsclosedsystems"&gt;Open vs. Closed Systems&lt;/h2&gt;

&lt;p&gt;This brings us to the predicament for the email privacy space. Email is based on open standards such as SMTP. There are many different flavors of mail clients out there and people often just use their OS's stock mail app since it usually does the trick. The problem here is that even if I decide to use email encryption, I still have to convince my contacts to install encryption on their device. Otherwise I cannot send end-to-end encrypted messages to them. This adds a lot of friction for startups that want to utilize email's viral potential to grow their user base.&lt;/p&gt;

&lt;p&gt;On the other hand there are closed systems like the above mentioned WhatsApp. From a user’s perspective these systems have the downside of missing interoperability and vendor lock-in, but they also have one big advantage. New features such as end-to-end encryption are much easier to add in an update. This is because vendors control the full stack for all users including the client app, which is where the encryption needs to happen.&lt;/p&gt;

&lt;p&gt;There is one system that I want to point out here that is kind of in between. &lt;a href="https://whispersystems.org/blog/just-signal/"&gt;Signal by Open Whisper Systems&lt;/a&gt; is used mainly by enthusiasts and activists. They open sourced their code and the Axolotl protocol specification, but it's still not quite the same as having an interoperable open standard like SMTP. So in this regard it's still a closed system. Even though the protocol definitely has what it takes to become the next de facto standard for encrypted asynchronous messaging. WhatsApp and Silent Circle have adopted the protocol for their apps and there seems to be broad agreement among security experts that it’s currently the state of the art.&lt;/p&gt;

&lt;h2 id="willthereeverbeopenendtoendencryptedmessagingatamassscale"&gt;Will there ever be open end-to-end encrypted messaging at a mass scale?&lt;/h2&gt;

&lt;p&gt;The question remains, is it feasible that end-to-end encryption will be adopted at mass scale for an open system such as email. The answer isn't obvious.&lt;/p&gt;

&lt;p&gt;Perhaps if a new product/protocol comes along that becomes the new de facto standard and already happens to have encryption built in. But that new protocol will have to be much better at certain things than SMTP to drive adoption. But don’t hold your breath. SMTP is here to stay, at least for the foreseeable future, simply because it’s already good enough for most users.&lt;/p&gt;

&lt;h1 id="whatwillhappenwiththeopensourcewhiteoutmailclient"&gt;What will happen with the open source Whiteout Mail client?&lt;/h1&gt;

&lt;p&gt;Since our &lt;a href="https://github.com/whiteout-io/mail-html5"&gt;mail client&lt;/a&gt; and our &lt;a href="http://emailjs.org/"&gt;email.js (IMAP/SMTP/MIME) libraries&lt;/a&gt; are open source and MIT licensed we would like to continue those in a community supported nonprofit context. Even though the business model didn't work out, this doesn't mean that we aren't proud of what we have built and there is no reason we need to kill the client app.&lt;/p&gt;

&lt;p&gt;Since we've been working closely with the &lt;a href="https://www.mailvelope.com/"&gt;Mailvelope&lt;/a&gt; team from the beginning on common libraries like &lt;a href="https://github.com/openpgpjs/openpgpjs/"&gt;OpenPGP.js&lt;/a&gt;, we've been exploring the idea of combining our efforts in order to bring our cross platform app and the Mailvelope extension together under one roof. The details have yet to be worked out and we're not yet sure how big the community interest is for such a move. So we'd love to hear your feedback and thoughts on this. &lt;/p&gt;

&lt;p&gt;I want to thank everyone who supported and believed in us during the past few years. Even though the business model didn't work out, we still learned a lot and it was a privilege to be able to work with so many talented people on such a hard problem.&lt;/p&gt;</content:encoded></item><item><title>Cross-platform with Chrome Apps - a Developer Diary</title><description>&lt;p&gt;When we started &lt;a href="https://whiteout.io"&gt;whiteout.io&lt;/a&gt; in 2013, our goal was to provide end-to-end encrypted email that is easy to use and that runs on all devices. We had a lot of technical discussions on which platform to use for development, but in the end decided to make a bet on&lt;/p&gt;</description><link>http://localhost:2368/2014/12/31/cross-platform-with-chrome-apps/</link><guid isPermaLink="false">693be180-1f2f-4498-b4a7-d93b1568732f</guid><dc:creator>Tankred Hase</dc:creator><pubDate>Wed, 31 Dec 2014 13:00:50 GMT</pubDate><content:encoded>&lt;p&gt;When we started &lt;a href="https://whiteout.io"&gt;whiteout.io&lt;/a&gt; in 2013, our goal was to provide end-to-end encrypted email that is easy to use and that runs on all devices. We had a lot of technical discussions on which platform to use for development, but in the end decided to make a bet on the web and also its rate of progression as a foundation for cross-platform app development. This is what the app looks like today:&lt;/p&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2014/12/placeit_2.png" alt="Whiteout Mail Screenshots"&gt;&lt;/p&gt;

&lt;p&gt;This decision was not obvious at the time given the recent developments from &lt;a href="http://www.theverge.com/2012/8/23/3262782/facebook-for-ios-native-app"&gt;Facebook&lt;/a&gt; and &lt;a href="http://venturebeat.com/2013/04/17/linkedin-mobile-web-breakup/"&gt;LinkedIn&lt;/a&gt; shifting away from HTML5 to a native apps strategy. And for good reason. &lt;a href="http://techcrunch.com/2014/04/01/mobile-app-usage-increases-in-2014-as-mobile-web-surfing-declines/"&gt;Recent data shows&lt;/a&gt; that mobile users are spending more time in apps than on the mobile web. Since many apps are written with web technology it's not clear if this is because of native vs. web. But it’s safe to assume one aspect is that native user interfaces are often perceived as faster and more fluid than their HTML5 counterparts.&lt;/p&gt;

&lt;p&gt;This does not mean that fast and fluid user experiences cannot be built using web technology. In fact after Facebook announced its shift to native, Sencha released a proof of concept called &lt;a href="http://www.sencha.com/blog/the-making-of-fastbook-an-html5-love-story"&gt;fastbook&lt;/a&gt;, which showed that it is indeed possible to build native like app experiences using nothing but web technology. It was clear that it was cheaper and easier to build a great experience for a single platform using native. But since we wanted Whiteout Mail to run everywhere, we needed a more scalable approach.&lt;/p&gt;

&lt;h2 id="thebet"&gt;The bet&lt;/h2&gt;

&lt;p&gt;Inspired by fastbook and some other apps and ui frameworks that we had been testing internally for our first proof of concept implementation of Whiteout Mail, we decided to make a bet on HTML5. This bet was based on the following hypotheses:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Evergreen browsers such as Chrome and Firefox are increasing the rate of innovation on the web and these would inevitably lead to evergreen WebViews that are used as runtimes in frameworks such as Cordova.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Platform and hardware capabilities, that were traditionally only exposed as native apis via Objective C on iOS or Java on Android, would surface as standardized apis for JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Development tools and frameworks would improve to the point where you would press only a button and out comes your app for: Windows, Mac, Linux, iOS, Android.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is why we are excited about Firefox OS. We don't believe it will compete with Android in terms of marketshare anytime soon, but Mozilla has always put pressure on other Browser/OS vendors like Google by spearheading standardization. &lt;/p&gt;

&lt;h2 id="fastforwardtotoday"&gt;Fast forward to today&lt;/h2&gt;

&lt;p&gt;We aren't quite there yet, but having spent the last year developing for the Chrome Apps platform, I think we're pretty damn close.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Android 4.4 was released with the Chromium WebView and Android 5.0 now has an &lt;a href="http://developer.android.com/about/versions/lollipop.html#WebView"&gt;autoupdating evergreen WebView&lt;/a&gt;. To bridge the gap to older devices and OS versions, developers can use the &lt;a href="https://crosswalk-project.org/"&gt;CrossWalk WebView&lt;/a&gt; to deploy an up-to-date runtime to Android 4.0+ (basically &lt;a href="https://developer.android.com/about/dashboards/index.html"&gt;over 90%&lt;/a&gt; of the current Android installed base).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Apple has released a very fast WebView for iOS 8. There are still some warts and I won’t go into all the details here. But you can read about the new WKWebView in &lt;a href="http://www.sencha.com/blog/apple-shows-love-for-html5-with-ios-8"&gt;Sencha’s post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many apis like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/TCPSocket"&gt;raw TCP sockets&lt;/a&gt; that are required for implementing email protocols like IMAP/SMTP aren’t standardized yet. But there are proprietary apis to fill the gap e.g. &lt;a href="https://developer.chrome.com/apps/sockets_tcp"&gt;chrome.sockets&lt;/a&gt; and &lt;a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.networking.sockets.streamsocket.aspx"&gt;StreamSocket&lt;/a&gt;. They can be shimmed easily to work like the emerging standard api using our &lt;a href="https://github.com/whiteout-io/tcp-socket"&gt;tcp-socket shim&lt;/a&gt;. This allowed us to develop &lt;a href="http://emailjs.org"&gt;email.js&lt;/a&gt;, a toolbox for writing cross-platform email applications in pure JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="whatarechromeapps"&gt;What are Chrome Apps?&lt;/h2&gt;

&lt;p&gt;For anyone who is new to Chrome Apps here are two resources to get started.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The official documentation: &lt;a href="https://developer.chrome.com/apps/about_apps"&gt;https://developer.chrome.com/apps/about_apps&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A great introduction video: &lt;a href="http://youtu.be/f3NctLbtsNE"&gt;http://youtu.be/f3NctLbtsNE&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="whywechosechromeapps"&gt;Why we chose Chrome Apps&lt;/h2&gt;

&lt;p&gt;The main reasons for us to use chrome apps are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Security:&lt;/strong&gt; Since Whiteout Mail stores the user's private PGP key locally there are a lot of advantages to Chrome Apps when compared to the normal drive by web. I've written about threat modeling for browser crypto in detail &lt;a href="http://tankredhase.com/2014/04/13/heartbleed-and-javascript-crypto/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Distribution:&lt;/strong&gt; Most users go to their platform’s native app store to discover new apps. Chrome Apps support packaging for all relevant platforms (Android, iOS, Windows, Mac OS, Linux).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Offline:&lt;/strong&gt; Email clients need to work when users are offline. Users want to read and write messages on a train or a flight. The client should sync whenever there’s a connection but also work when there isn’t one.&lt;/p&gt;

&lt;h2 id="ourexperiencewithchromeapps"&gt;Our Experience with Chrome Apps&lt;/h2&gt;

&lt;p&gt;Building a complete email client in JavaScript with full IMAP / SMTP / MIME / OpenPGP support wasn’t an easy task, but the Chrome Apps platform provided a good foundation for this journey. Here is a brief overview of our experience developing Whiteout Mail.&lt;/p&gt;

&lt;h3 id="thedesktop"&gt;The desktop&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2014/12/placeit_3.jpg" alt="Screenshot of Whiteout Mail for the desktop"&gt;&lt;/p&gt;

&lt;p&gt;We started on the desktop since that was the first platform Chrome Apps were officially supported. This has turned out to be a good place to start. Chrome Apps are currently the most stable deployment path for cross-platform HTML5 packaged apps. We tried &lt;a href="https://developer.mozilla.org/en-US/Marketplace/Options/Packaged_apps"&gt;Firefox Packaged Apps&lt;/a&gt; but couldn't even &lt;a href="http://stackoverflow.com/questions/24339502/how-to-test-privileged-packaged-apps-on-firefox-for-desktop"&gt;debug them&lt;/a&gt; for the desktop.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that Chrome Apps have several more constraints than regular web apps like &lt;a href="https://developer.chrome.com/apps/contentSecurityPolicy"&gt;Content Security Policy (CSP)&lt;/a&gt;. You may need to sandbox certain content into iframes and using apis like eval and inline scripts is not allowed. This is one reason we decided to use angular.js as it &lt;a href="https://docs.angularjs.org/api/ng/directive/ngCsp"&gt;supports CSP&lt;/a&gt; out of the box. One valuable experience we had here is that starting from a constrained architecture is always easier than the other way around. So it's best to start using CSP early if you intend to support Chrome Apps.&lt;/p&gt;

&lt;p&gt;You can try our desktop app &lt;a href="https://chrome.google.com/webstore/detail/whiteout-mail/jjgghafhamholjigjoghcfcekhkonijg"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="android"&gt;Android&lt;/h3&gt;

&lt;p&gt;&lt;img src="http://localhost:2368/content/images/2014/12/placeit_1.jpg" alt=""&gt;&lt;/p&gt;

&lt;p&gt;Next we ported the app to Android using the &lt;a href="https://github.com/MobileChromeApps/mobile-chrome-apps/blob/master/README.md"&gt;Chrome Cordova Apps&lt;/a&gt;. This turned out to be a surprisingly simple task due to the above mentioned Crosswalk WebView. The main challenge here was getting the back button for Android to work correctly. To be fair this was mainly because we forgot to handle the browser history at first in angular. Had we done this right from the beginning, the back button would have worked out of the box.&lt;/p&gt;

&lt;p&gt;You can try the Android app &lt;a href="https://play.google.com/store/apps/details?id=io.whiteout.WhiteoutMail"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="ios"&gt;iOS&lt;/h3&gt;

&lt;p&gt;Finally we went on to tackle iOS. This turned out to be the hardest of the platforms due to some issues with the Chrome Api plugins. Thankfully &lt;a href="https://github.com/orgs/MobileChromeApps/people"&gt;the team&lt;/a&gt; behind Mobile Chrome Apps was very helpful and supportive. Anytime we had an issue, we received a response promptly on GitHub. Bugfixes also landed quickly in upcoming versions of &lt;em&gt;cca&lt;/em&gt; (Chrome Cordova Apps’ command line tool).&lt;/p&gt;

&lt;p&gt;The iOS version is still in closed beta using Apple’s TestFlight service, but we will release this very soon.&lt;/p&gt;

&lt;h3 id="theweb"&gt;The Web&lt;/h3&gt;

&lt;p&gt;We were even able to get a full version of the app running on the web using the same code-base as for the Chrome Apps. We did this by extending our tcp-socket shim to use &lt;a href="http://socket.io"&gt;socket.io&lt;/a&gt; (to proxy TCP connections required for IMAP and SMTP) and &lt;a href="https://github.com/digitalbazaar/forge"&gt;Forge&lt;/a&gt; (a JavaScript implementation of TLS). This way we were able to terminate the TLS session on the user’s machine so that our proxy does not see any plaintext user data like passwords or email message content.&lt;/p&gt;

&lt;p&gt;You can try the webmail version of Whiteout Mail &lt;a href="https://mail.whiteout.io"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="thecode"&gt;The code&lt;/h3&gt;

&lt;p&gt;In case you’re interested you can check out all of the &lt;a href="https://github.com/whiteout-io/mail-html5"&gt;code on GitHub&lt;/a&gt; since the Whiteout Mail client is &lt;a href="https://blog.whiteout.io/2014/10/17/webmail-and-open-source/"&gt;open source&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;

&lt;p&gt;The Chrome Apps platform is pretty close to the &lt;em&gt;write once run anywhere&lt;/em&gt; dream developers aspire to. The main advantage to using something like Chrome Apps or Cordova is that you can deploy your web app using each platform's native app store, since this is where most users go to discover new content and apps.&lt;/p&gt;

&lt;p&gt;There are of course still some caveats e.g. missing standardization of certain apis and packaging formats, but time will fix all of these issues. Standardization always trails innovation and without pioneers like Chrome Apps we would have to iterate on these concepts within the standards bodies, which is in nobody’s best interest.&lt;/p&gt;

&lt;p&gt;To get a feeling for where all this is heading here’s a &lt;a href="https://divshot.com/blog/opinion/the-future-of-the-web-according-to-google/"&gt;great summary&lt;/a&gt; of the 2014 Chrome Developer Summit. It seems like Google will be focusing less on proprietary apis in Chrome Apps and more on bringing all of this goodness to the open web. They intend to keep supporting Chrome Apps since it’s the native development platform for Chromebooks but it's clear where the focus will be.&lt;/p&gt;

&lt;p&gt;What does all of this mean for developers? In short I would definitely recommend developing for Chrome Apps. Even if Google decided to deprecate Chrome Apps tomorrow, you could still reuse 99% of your code on the open web (as we have with the Webmail version of Whiteout Mail). So there’s not a lot of risk for vendor lock-in. All in all Chrome Apps have become a very robust development environment and tooling like remote debugging in Chrome has matured to a point that the web now has a productive development workflow.&lt;/p&gt;</content:encoded></item><item><title>Heartbleed and JavaScript Crypto</title><description>&lt;p&gt;Reading the news on Heartbleed in the mainstream media these days got me thinking. It's hard enough to grasp the consequences as a technical person, but trying to explain to my girlfriend why she might want to change the passwords to all of her favorite sites made me think if&lt;/p&gt;</description><link>http://localhost:2368/2014/04/13/heartbleed-and-javascript-crypto/</link><guid isPermaLink="false">6ca2af89-e110-4752-b067-71a517e2debd</guid><dc:creator>Tankred Hase</dc:creator><pubDate>Sun, 13 Apr 2014 12:26:00 GMT</pubDate><content:encoded>&lt;p&gt;Reading the news on Heartbleed in the mainstream media these days got me thinking. It's hard enough to grasp the consequences as a technical person, but trying to explain to my girlfriend why she might want to change the passwords to all of her favorite sites made me think if things couldn't be different.&lt;/p&gt;

&lt;p&gt;There is no such thing as bug-free software and anyone writing a complex enough application will experience critical security bugs sooner or later. For most web applications the single line of defense to protect user's data in transit has pretty much been SSL. Much has been said about JavaScript cryptography &lt;a href="http://www.matasano.com/articles/javascript-cryptography/"&gt;here&lt;/a&gt; and &lt;a href="http://tonyarcieri.com/whats-wrong-with-webcrypto"&gt;here&lt;/a&gt;. While these were great blogposts in their time, in the wake of Heartbleed I would like to discuss how JavaScript crypto can  add a valid layer of security if it is deployed correctly.&lt;/p&gt;

&lt;h2 id="threatmodeling"&gt;Threat modeling&lt;/h2&gt;

&lt;p&gt;It's very trendy to criticize JS crypto. And while some arguments are valid, more often than not they are made in a  vacuum and without context. When discussing security mechanisms we should discuss what we're trying to protect and from whom. For web apps I see two main categories:&lt;/p&gt;

&lt;h3 id="servicesyoutrustwithyourdata"&gt;Services you trust with your data&lt;/h3&gt;

&lt;p&gt;I will use an example here. Elster is a system used by the German government which lets citizens do their taxes online. You can visit it at &lt;a href="https://www.elsteronline.de"&gt;https://www.elsteronline.de&lt;/a&gt;. What most people don't know is that Elster uses JS crypto to authenticate users with a passphrase protected Elster certificate which is decrypted in the browser. Before the crypto trolls start getting hungry, let me explain why this makes perfect sense.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You trust Elster with your tax data and therefor it's ok to trust their web server for authentication.&lt;/strong&gt; This is not a zero knowledge type application where you're trying to protect your data from a service provider. The user does not want to protect his data from Elster. It is actually Elster that wants to verify that you are the person with the corresponding tax identifier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The alternative is a Java Applet.&lt;/strong&gt; Yes, this is how the authentication worked before they switched to the Java-free version. And we all know Java is not famous for it's security track record. So given the choice I'd take JS crypto over having to activate Java in my browser any day.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What I'm trying to say with this example is that there are use cases where deploying JavaScript cryptography over a standard web server setup can make perfect sense if you trust the web server with your data. Another example like this is Netflix, which uses WebCrypto and new DRM standards to protect &lt;em&gt;their&lt;/em&gt; premium content. But basically any website that sends the user's password in plaintext to the web server could do hashing client side. This would prevent my girlfriend from having to change all of her passwords when something like Heartbleed happens, since most web servers don't use forward secrecy and the compromise of private SSL keys can be used to decrypt stored traffic after the fact.&lt;/p&gt;

&lt;h3 id="servicesyoudonttrustcompletelywithyourdata"&gt;Services you don't trust (completely) with your data&lt;/h3&gt;

&lt;p&gt;Now that we've established an example for where a normal web server deployment can make sense, lets look at an example of where it does not make sense. &lt;a href="https://whiteout.io"&gt;Whiteout Mail&lt;/a&gt; is an application designed to make PGP encryption easier for average users (I'm a co-founder and developer). When we started designing the app, we thought about deployment via standard web hosting due to ease of use, but that simply does not make sense for this type of app.&lt;/p&gt;

&lt;p&gt;Crypto.cat got a lot of heat by security experts back in the day when it was  served via a web server. You can read the two blogposts I linked at the top or just take &lt;a href="https://www.schneier.com/blog/archives/2012/08/cryptocat.html"&gt;Bruce Schneier's word for it&lt;/a&gt;. This is why crypto.cat changed to an App/Extension based deployment model. This is has several reasons.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You don't trust the web server with your data.&lt;/strong&gt; If you did you wouldn't be using client side crypto. Every time you click on a link, you're basically "installing" the client side code on your machine to be executed in your browser. The term "drive by web" is usually used here, which basically means that browsers are designed to run arbitrary untrusted code. For zero knowledge type apps, this is not the model we're looking for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;We want auditable static versions.&lt;/strong&gt; For privacy sensitive applications it is a best practice for software to be installed locally with a static version. This version is signed, downloaded, verified locally by runtimes and can be audited by independent security researchers.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="bestpracticesforjscrypto"&gt;Best practices for JS crypto&lt;/h2&gt;

&lt;p&gt;It is a bit simplistic to split the world into these two categories, but for starters I hope it will help developers working with the new &lt;a href="http://www.w3.org/TR/WebCryptoAPI/"&gt;Web Crypto Apis&lt;/a&gt; to understand where to put their application. To help you get started here is a summary of learnings from our work on Whiteout Mail.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For zero-knowledge type applications, use packaged apps.&lt;/strong&gt; They are available for &lt;a href="https://developer.mozilla.org/en-US/Marketplace/Publishing/Packaged_apps"&gt;Firefox&lt;/a&gt;, &lt;a href="https://developer.chrome.com/apps/about_apps"&gt;Chrome&lt;/a&gt;, and for mobile there's PhoneGap and Google's &lt;a href="https://github.com/MobileChromeApps/mobile-chrome-apps#run-chrome-apps-on-mobile-using-apache-cordova"&gt;Chrome mobile apps&lt;/a&gt;. Even Microsoft now supports &lt;a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211361"&gt;first class HTML5 apps&lt;/a&gt; with universal apps for Windows 8.1. The advantage besides security is also that your app can be found in the platform's native app store, which is where most users look to find apps anyway.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;For web server deployments use SSL&lt;/strong&gt; with &lt;a href="http://crypto.stackexchange.com/questions/8933/how-can-i-use-ssl-tls-with-perfect-forward-secrecy"&gt;forward secrecy&lt;/a&gt; and activate &lt;a href="https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security"&gt;HSTS (HTTP Strict Transport Security)&lt;/a&gt; on your web server. Chrome even supports &lt;a href="http://blog.chromium.org/2011/06/new-chromium-security-features-june.html"&gt;certificate pinning&lt;/a&gt; now.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;You should use &lt;a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/"&gt;CSP (Content Security Policy)&lt;/a&gt;&lt;/strong&gt; to protect users against XSS. It's very easy to configure and there is no excuse to not use it. This also forces you to write code with a clean separation of concerns.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Parse data from a server with JSON.parse&lt;/strong&gt; (never with eval) and &lt;strong&gt;escape all strings&lt;/strong&gt; before inserting them into the DOM. If you're using a framework like Angular.js it will escape models automatically before rendering and it's even compatible with CSP!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Always code in ES5 strict mode.&lt;/strong&gt; You can use jshint inside your favorite editor (I use sublime) and tools like grunt make it easy to integrate into your test suite.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write unit tests rigorously.&lt;/strong&gt; I cannot overstate how important this is. You will not catch regressions otherwise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do code reviews&lt;/strong&gt; before merging changes to the master branch. This will not only catch some security bugs, but also increase code quality and maintainability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Do regular security audits&lt;/strong&gt; by independent professionals. They will find stuff. Trust me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;If you can, open source your code.&lt;/strong&gt; This isn't possible for all business models, but if you can't open source the entire client app, at least open source the crypto bits to allow inspection.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="potentialbenefitsofjscryptoovernativecrypto"&gt;Potential benefits of JS crypto over native crypto&lt;/h2&gt;

&lt;p&gt;I know I'm stretching a bit here, but bear with me for a moment. Here are a few aspects in which I think JS crypto has an advantage over native crypto:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Installed JS crypto apps source can be viewed.&lt;/strong&gt; There is a great blogpost by Jon Callas from Silent Circle about the verifiability of native apps. You should definitely &lt;a href="https://blog.silentcircle.com/reply-to-zooko/"&gt;check it out&lt;/a&gt;. He explains why open sourcing Silent Circle would not solve the problem Ken Thomson first articulated in his &lt;em&gt;Reflections on Trusting Trust&lt;/em&gt;. For interpreted languages such as JavaScript, we don't have this problem as the app is deployed as source code. You still need to trust the browser runtime (which is of course compiled code), but it minimizes the amount of code-bases you need to trust to your OS and your Browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JavaScript is memory safe.&lt;/strong&gt; It seems obvious but often overlooked. The bug that caused Heartbleed was due to a problem that C compilers leave to programmers: memory safety. Although JavaScript is slower in performance due to this property, buffer overflows like the one that caused Heartbleed are a lot less likely to happen in JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;One codebase means less room for error.&lt;/strong&gt; I explained this in an &lt;a href="https://github.com/tanx/SafeWith.me/wiki/FAQ"&gt;FAQ for safewith.me&lt;/a&gt; (a hobby project before whiteout.io). The lines of code in any project &lt;a href="http://mayerdan.com/ruby/2012/11/11/bugs-per-line-of-code-ratio/"&gt;correlate to the number of bugs&lt;/a&gt; sleeping in a given software. If there's anything we've learned from Heartbleed, it's that no matter the choice of programming language, the biggest risk is human error. Since we're serving all platforms with a single codebase with JavaScript, were reducing the room for human error and therefor the attack surface. It also makes the code easier to understand and audit by outsiders.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That concludes my thoughts. If you have any comments, don't hesitate to give feedback as I'm new to blogging (this is my first post). So be gentle :)&lt;/p&gt;</content:encoded></item></channel></rss>